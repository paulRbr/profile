[alias]
  co = checkout
  ci = commit
  st = status
  pu = push
  pl = pull
  tag = tag -s
  gap = add -p
  pub = "!f() { git push -u ${1:-origin} `git symbolic-ref HEAD`; }; f"
  l = log --graph --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
  ll = log --stat --abbrev-commit
  d = diff --color-words
  hist = "log --pretty=format:\"%C(yellow)%h%Creset %C(green)%ad%Creset | %s %C(blue)%d%Creset %C(red)[%an]%Creset\" --graph --date=short --color"
  review = "!f() { git rebase -i HEAD@{u} --autosquash && git pull ; }; f"
  feat = "!f() { git co -b ${1:-my-new-feature} --track ${2:-upstream}/${3:-development} ; }; f"
  track = "!f() { : git branch ; git branch --set-upstream-to=${1:-upstream}/${2:-development} ; }; f"
  done  = "!f() { local name=$(git symbolic-ref --short HEAD) ; git co - ; git branch -D $name ; git branch -r -D $name ; git push origin :$name ; git pull ; }; f"
  tracked = "!f() { local a=\"$(git branch -vv | grep \"$(git rev-parse --abbrev-ref HEAD)\")\" ; a=${a#*[} ; a=${a%%]*} ; echo ${a%%:*} ; }; f"
  octo = merge --commit --no-ff
  merged = "!f() { git hist ${1:-development}...${2:-master} | grep -no \"Merge branch '[^']*'\"  | awk '{print $3}' ; }; f"
  clean-branches = "!f() { for branch in $(git branch | sed 's/*//'); do echo \"Checking branch $branch\"; git co $branch; git track ${1:-upstream} ${2:-development}; git pull ${1:-upstream}; if [ -n \"$(git diff ${1:-upstream}/${2:-development})\" ]; then echo \"##=> $branch is not empty\"; else git done; fi; done }"
[push]
  default = simple
[pull]
  rebase = true
[fetch]
  prune = true
[web]
  browser = open
[gui]
  fontdiff = "-family Monaco -size 13 -weight normal -slant roman -underline 0 -overstrike 0"
[color]
  branch = auto
  diff = auto
  status = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = green
  changed = red
  untracked = cyan
[diff "csv"]
  wordRegex = .
[core]
  excludesfile = /home/paul/.gitignore
[credential]
  helper = "netrc -f ~/.netrc.gpg -v"
[user]
  name = Paul B.
  email = paul@bonaud.fr
  signingkey = DE331B23748D3A27
[commit]
  gpgsign = true
  # No need for verbose commit when using magit
  # verbose = true
[includeIf "gitdir:~/devel/ct/"]
  path = ~/devel/ct/.gitconfig
[includeIf "gitdir:~/devel/fretlink/"]
  path = ~/devel/fretlink/.gitconfig
[includeIf "gitdir:~/devel/bump-sh/"]
  path = ~/devel/bump-sh/.gitconfig
[log]
	showSignature = false
[forge]
        remote = upstream
[github]
        user = paulrbr
[gitlab]
	user = paulrbr
[gitlab "framagit.org/api/v4"]
	user = paulrbr
