if [ $(command -v kubectl) ]; then
  source <(kubectl completion bash)
fi
if [ $(command -v helm) ]; then
  source <(helm completion bash)
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

#Alias for shell commands
alias rm='rm -i'
alias archive='tar -cvf'
alias untar='tar -xvf'
alias ll='ls -l'
alias less="less -R"
#Alias for top mem and top cpu usage
alias mem='ps a --sort pid -o %mem,pid,ucmd -u $USER | tail -n+2 | sort -rn | head'
alias cpu='ps a --sort pid -o %cpu,pid,ucmd -u $USER | tail -n+2 | sort -rn | head'
#Always no windo emacs
alias emacs='emacs -nw --no-desktop'
#Alias for rsync default
alias rsync='rsync -av --progress --partial'

# Transfer file online via transfer.sh
function transfer_gpg() {
    cat "$1"|gpg -ac -o-|curl -X PUT --upload-file "-" https://transfer.sh/$(basename "$1")
}

function fetch_gpg() {
    curl $1 |gpg -o- > $2
}

function transfer() {
    cat $1|curl -X PUT --upload-file "-" https://transfer.sh/$(basename $1)
}

function fetch() {
    curl $1 > $2
}

function weather() {
    curl -s wttr.in/$1
}

function rain() {
    local query="$1"
    #-H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:62.0) Gecko/20100101 Firefox/62.0' -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Accept-Language: pt-BR,en;q=0.7,fr;q=0.3' --compressed -H 'Referer: https://www.insee.fr/fr/recherche/recherche-geographique?geo=COM-92050&debut=0' -H 'Content-Type: application/json; charset=utf-8' -H 'X-Requested-With: XMLHttpRequest' -H 'Cookie: JSESSIONID=24070BBAD6966D2A2FC9E4837A16625F; web4g=!HQ6xEdkHA72E5p3BTsjuiHaiUCYNdm6dBD2tfb4IsUibwbxs6jp2GGLeN4/PTyXO6gczd5QUlVwsY5P0GsOpIaRScLo2vajguP7rFnw=; i18next=fr' -H 'DNT: 1' -H 'Connection: keep-alive' --data '{"q":"Paris 13","filters":[],"sortFields":[{"field":"geographie_nccenr_s","order":"asc"}]}'

    #,"filters":[],"sortFields":[{"field":"geographie_nccenr_s","order":"asc"}]}'
    commune=$(curl --silent -X POST 'https://www.insee.fr/fr/metadonnees/geographie-administrative/cog/suggestion' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:62.0) Gecko/20100101 Firefox/62.0' -H 'Content-Type: application/json; charset=utf-8' -H 'X-Requested-With: XMLHttpRequest' --data '{"q":"'"$query"'","filters":[],"sortFields":[{"field":"geographie_nccenr_s","order":"asc"}]}' | jq --raw-output '.documents | map(select(.libelleActive != null)) | first | .touteZone.code')

    rainData=$(curl --silent 'http://www.meteofrance.com/mf3-rpc-portlet/rest/pluie/'"$commune"'0' | jq --raw-output '. | .lastUpdate, .niveauPluieText[]')
    lastUpdate=$(echo "$rainData" | cut -d$'\n' -f1)
    niveauPluie=$(echo "$rainData" | cut -d$'\n' -f2)

    if [[ $niveauPluie = *"Pas de pr√©cipitations"* ]]; then
        echo -n "‚òÄÔ∏è"
    else
        echo -n "üåßÔ∏è"
    fi

    echo -e "\e[32m\e[34m (commune: $commune, derni√®re M√†J √† $lastUpdate¬†: $niveauPluie)\e[0m"
}

function totp() {
    if (which rotp); then
        if [ "$#" -ne 1 ]; then
           echo "totp <pass-name>"
        else
           rotp --secret $(pass $1) | xclip
        fi
    else
        echo "rotp gem not installed" >2
    fi
}

function tunnel() {
     sshuttle --dns -r $1 0/0
}

function cleanup_docker() {
     # delete old docker processes
     docker ps -a --filter "status=exited" --format "{{.ID}}"

     # delete old images. will complain about still-in-use images.
     docker rmi $(docker images -f "dangling=true" -aq)
}

function reset_yubikey_card() {
  local resetCmds="L2hleApzY2Qgc2VyaWFsbm8Kc2NkIGFwZHUgMDAgMjAgMDAgODEgMDggNDAgNDAgNDAgNDAgNDAgNDAgNDAgNDAKc2NkIGFwZHUgMDAgMjAgMDAgODEgMDggNDAgNDAgNDAgNDAgNDAgNDAgNDAgNDAKc2NkIGFwZHUgMDAgMjAgMDAgODEgMDggNDAgNDAgNDAgNDAgNDAgNDAgNDAgNDAKc2NkIGFwZHUgMDAgMjAgMDAgODEgMDggNDAgNDAgNDAgNDAgNDAgNDAgNDAgNDAKc2NkIGFwZHUgMDAgMjAgMDAgODMgMDggNDAgNDAgNDAgNDAgNDAgNDAgNDAgNDAKc2NkIGFwZHUgMDAgMjAgMDAgODMgMDggNDAgNDAgNDAgNDAgNDAgNDAgNDAgNDAKc2NkIGFwZHUgMDAgMjAgMDAgODMgMDggNDAgNDAgNDAgNDAgNDAgNDAgNDAgNDAKc2NkIGFwZHUgMDAgMjAgMDAgODMgMDggNDAgNDAgNDAgNDAgNDAgNDAgNDAgNDAKc2NkIGFwZHUgMDAgZTYgMDAgMDAKc2NkIGFwZHUgMDAgNDQgMDAgMDAKL2VjaG8gQ2FyZCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgcmVzZXQuCg=="

  gpg-connect-agent -r <(echo ${resetCmds} | openssl base64 -d)
}
